import java.util.HashSet;
import java.util.Set;


class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length() <= 1) {  //edge case if substring is only one val
            return s.length();
        }
            int max = 0;
        Set<Character> charSet = new HashSet<>();
              //left basically plays as a catch up and keeps track of where to go
              //r is just a pointer to move through values
        for (int left = 0, right = 0; right < s.length(); right++) {
            char currentChar = s.charAt(right);
            while (charSet.contains(currentChar)) {
                charSet.remove(s.charAt(left));
                left++;
            }
            charSet.add(currentChar);
            //+1 for lets say the first char, 0 left 0 right but + 1 for value
            max = Math.max(max, right - left + 1);
        }
        return max;
    }
