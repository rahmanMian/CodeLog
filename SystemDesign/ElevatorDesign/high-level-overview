

Step 1:
Red flag to jump in
What can the elevator do > up,down, idle
What is the purpose? transfer passengers from one floor to another
What should id do > open the door when idle
How many floorss > 200
How many elevator cars > 50 
this is based on burjmax ho
What are teh specs of the elevator car > number of passangers can hold/max speed the elevaotr can hold
What do we miniize:
Wait time of system
Wait time of passenger
Do we want to minimize power usage
Minimise cost
Zone the floors for elevators > divide and conquer
Emergency alarms
Vip elevetors
Moinitoring systems


AT THE END:
1. Short features to design for
2. Non Functional requirements


Step 2:
Objects > Passaenger, Elevator Car, floors, doors, button panels(in and out), button pannel(floor numbers), Dispatch system(pick closest eleavators), Monitoring systems
Actor > Passenager class > dont need as it is not a simulation system

Use Cases:
1.Calling Elevator
2.Move or stop elevtor
3.Open or close the doors
4.Elevator direction
5.Indicating elevator floor
6.Emergency break
7.Emergency call

Classes and Interfaces:
Button interface(pressDown(), isPressed())
Elevator Buttons Class  and Hall Button Class use button interface
Door Class Open() Close() isOpen()
Elevator Motion Interface move(destination floor) stop() 

THE SCHDEULING ALGORITHM:
1.First come first serve
  Hall buttons are connected to algo
  All requests go in a queue
  4 STATES THINK ABOUT THEM
Issue: elevator starts at one. if pass wants to go to 5 to 2 and one wants to go to 5 from 3 first elevator go to 5 then down to 3 then back to 5

2.Shortest seek time first(SSTF)
a) Priority Queue/Min Heap
b) array stores them and sees min request value
Issue: group of people at the bottom adn one boy at the top the elevtor will continue stay at the bottom and not serve the top. Multiple request in parallel dont work

3.Scan Algorithm / Elevator Algorithm
Two boolean arrays> one for up and one for down
Go all the way up and down and scans
Issue: Elevator cars are constantly moving. Only change directoin when going ot the end

4. Look(Look ahead and scan) can use hashmap bst etc
Look ahead and sees if there are requests ahead. If not they dont move. Move only based on requests
In reality its look + heuristics applied

5. Desitination dispactch algo
multiple elevators and what to open.

 




Start with APIS -> establish contract between users and backend
Turn requirements -> APIS USE REST IF NOT SPECIFY
DO NOT INTRO APIS NOT CONNECTED TO REQUIREMENTS
WEBSOCKET FOR TWO WAY -> HARD TO SCALE
NOW HHL DESIGN DIAGRAM
BLUEPRINT
START WITH LOAD BALANCER > DATA STORAGE LAYER SCRATCH THE TOP
While developing design maintain discussion points for later eg database scaling high concurrency failure scenarios
DONT GO INTO DETAIL
Final step -> data model and schema
discuss db choices and indexing options
Take a step back and review

Step 3:
Identity potential problematic areas
talk to interviewer about this
Pick up onn interviewr body lang if shown sign of distress
Discussion:
Aritculate the Problem
Make two solutions
Discuss trade off solutions -> use numbers
Pick solution and discuss implementaiton

Step 4:
Summarize desing
focus on unique parts of sol
ask interview about company too
